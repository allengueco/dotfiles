local wezterm = require 'wezterm'
local config = wezterm.config_builder()

config.use_fancy_tab_bar = true
config.tab_max_width = 32
config.pane_focus_follows_mouse = true
config.scrollback_lines = 5000
config.switch_to_last_active_tab_when_closing_tab = true
config.color_scheme = 'Catppuccin Frappe'
config.font = wezterm.font 'JetBrainsMono Nerd Font'
config.font_size = 11
config.initial_rows = 36 
config.initial_cols = 96 

config.colors = {
    tab_bar = {
        -- The color of the strip that goes along the top of the window
        -- (does not apply when fancy tab bar is in use)
        background = '#0b0022',

        -- The active tab is the one that has focus in the window
        active_tab = {
            -- The color of the background area for the tab
            bg_color = '#2b2042',
            -- The color of the text for the tab
            fg_color = '#c0c0c0',

            -- Specify whether you want "Half", "Normal" or "Bold" intensity for the
            -- label shown for this tab.
            -- The default is "Normal"
            intensity = 'Normal',

            -- Specify whether you want "None", "Single" or "Double" underline for
            -- label shown for this tab.
            -- The default is "None"
            underline = 'None',

            -- Specify whether you want the text to be italic (true) or not (false)
            -- for this tab.  The default is false.
            italic = false,

            -- Specify whether you want the text to be rendered with strikethrough (true)
            -- or not for this tab.  The default is false.
            strikethrough = false,
        },

        -- Inactive tabs are the tabs that do not have focus
        inactive_tab = {
            bg_color = '#1b1032',
            fg_color = '#808080',

            -- The same options that were listed under the `active_tab` section above
            -- can also be used for `inactive_tab`.
        },

        -- You can configure some alternate styling when the mouse pointer
        -- moves over inactive tabs
        inactive_tab_hover = {
            bg_color = '#3b3052',
            fg_color = '#909090',
            italic = true,

            -- The same options that were listed under the `active_tab` section above
            -- can also be used for `inactive_tab_hover`.
        },

        -- The new tab button that let you create new tabs
        new_tab = {
            bg_color = '#1b1032',
            fg_color = '#808080',

            -- The same options that were listed under the `active_tab` section above
            -- can also be used for `new_tab`.
        },

        -- You can configure some alternate styling when the mouse pointer
        -- moves over the new tab button
        new_tab_hover = {
            bg_color = '#3b3052',
            fg_color = '#909090',
            italic = true,

            -- The same options that were listed under the `active_tab` section above
            -- can also be used for `new_tab_hover`.
        },
    },
}

config.inactive_pane_hsb = {
    saturation = 0.8,
    brightness = 0.7
}

config.window_padding = {
    left = 0,
    right = 0,
    top = 0,
    bottom = 0,
}

config.leader = {
    key = 'a',
    mods = 'CTRL',
    timeout_milliseconds = 2000,
}
config.window_decorations = "INTEGRATED_BUTTONS|RESIZE"
-- smart-splits.nvim integration because not lazy loading
local function is_vim(pane)
    return pane:get_user_vars().IS_NVIM == 'true'
end
local direction_keys = {
    h = 'Left',
    j = 'Down',
    k = 'Up',
    l = 'Right',
}

local function split_nav(resize_or_move, key)
    return {
        key = key,
        mods = resize_or_move == 'resize' and 'ALT' or 'CTRL',
        action = wezterm.action_callback(function(win, pane)
            if is_vim(pane) then
                -- pass the keys through to nvim
                win:perform_action({
                    SendKey = { key = key, mods = resize_or_move == 'resize' and 'ALT' or 'CTRL' },
                }, pane)
            else
                if resize_or_move == 'resize' then
                    win:perform_action({ AdjustPaneSize = { direction_keys[key], 3 } }, pane)
                else
                    win:perform_action({ ActivatePaneDirection = direction_keys[key] }, pane)
                end
            end
        end),
    }
end
config.keys = {
    -- move between split panes
    split_nav('move', 'h'),
    split_nav('move', 'j'),
    split_nav('move', 'k'),
    split_nav('move', 'l'),

    -- resize panes
    split_nav('resize', 'h'),
    split_nav('resize', 'j'),
    split_nav('resize', 'k'),
    split_nav('resize', 'l'),
    {
        key = '[',
        mods = 'LEADER',
        action = wezterm.action.ActivateCopyMode,
    },
    {
        key = 'c',
        mods = 'LEADER',
        action = wezterm.action.SpawnTab 'CurrentPaneDomain'
    },
    {
        key = 'f',
        mods = 'ALT',
        action = wezterm.action.TogglePaneZoomState,
    },
    {
        key = 'n',
        mods = 'LEADER',
        action = wezterm.action.ActivateTabRelative(1),
    },
    {
        key = 'p',
        mods = 'LEADER',
        action = wezterm.action.ActivateTabRelative(-1),
    },
    {
        key = ',',
        mods = 'LEADER',
        action = wezterm.action.PromptInputLine {
            description = 'Enter new name for tab',
            action = wezterm.action_callback(
            function(window, pane, line)
                if line then
                    window:active_tab():set_title(line)
                end
            end
            ),
        },
    },
    {
        key = 'w',
        mods = 'LEADER',
        action = wezterm.action.ShowTabNavigator,
    },
    {
        key = '&',
        mods = 'LEADER|SHIFT',
        action = wezterm.action.CloseCurrentTab { confirm = true },
    },
    {
        key = '|',
        mods = 'LEADER|SHIFT',
        action = wezterm.action.SplitPane {
            direction = 'Right',
            size = { Percent = 50 }
        }
    },
    {
        key = '-',
        mods = 'LEADER',
        action = wezterm.action.SplitPane {
            direction = 'Down',
            size = { Percent = 50 }
        }
    },
    {
        key = '{',
        mods = 'LEADER|SHIFT',
        action = wezterm.action.PaneSelect { mode = 'SwapWithActiveKeepFocus' }
    },
    {
        key = ';',
        mods = 'LEADER',
        action = wezterm.action.ActivatePaneDirection('Prev'),
    },
    {
        key = 'o',
        mods = 'LEADER',
        action = wezterm.action.ActivatePaneDirection('Next'),
    },
}

{{- if eq .chezmoi.os "windows" }}
-- config.default_domain = 'WSL:Arch'
config.launch_menu = {
    label = 'Local (Powershell)',
    args = { 'pwsh', '-NoLogo' },
    domain = { DomainName = 'local' }
}
config.ssh_domains = {
    {
        name = 'Allen-RPI',
        remote_address = 'allen-rpi.local',
        username = 'allengueco'
    }
}
config.default_prog = { 'pwsh.exe', '-nologo' }
config.front_end = 'WebGpu'
{{- end}}

return config
